# CONFIGURATION FILE

## If this is a new deployment of our monitoring stack, please refer to this
##  project's readme for more instructions on initializing the stack with letsencrypt
##    using elements of the awesome repo found at https://github.com/wmnnd/nginx-certbot

##      Out of the box, Nginx in this stack will not run because it will try to resolve the ssl
##          cert paths which will not resolve to real certs until the initialization is complete.

# Virtual server to redirect non-secure http requests to secure port
server {
    listen          80 default_server;
    listen          [::]:80 default_server;
    server_name     <my-site.com>;
    server_tokens   off;

    location / {
        return 301 https://$host$request_uri;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    error_page 404 /404.html;
        location = /40x.html{
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

# Virtual server to reverse proxy normal https requests to the kibana server in the Docker
#   stack, which is internally resolved to http://kibana:5601
server {
    listen          443 ssl http2 default_server;
    listen          [::]:443 ssl http2 default_server;
    server_name     my-site.com;
    server_tokens   off;
    ssl             on;

    ssl_certificate /etc/letsencrypt/live/my-site.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/my-site.com/privkey.pem;
    include /etc/letsencrypt/conf/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/conf/ssl-dhparams.pem;

    location / {
        proxy_pass http://kibana:5601/;
    }
}

# Virtual server to reverse proxy requests to Elasticsearch's default port to the 
#   elasticsearch server in the Docker stack, which is internally resolved 
#       to http://elasticsearch:9200
server {
    listen          9200 ssl http2 default_server;
    listen          [::]:9200 ssl http2 default_server;
    server_name     my-site.com;
    server_tokens   off;
    ssl             on;

    ssl_certificate /etc/letsencrypt/live/my-site.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/my-site.com/privkey.pem;
    include /etc/letsencrypt/conf/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/conf/ssl-dhparams.pem;

    error_page  497 https://$host:9200$request_uri;

    location / {
        proxy_pass http://elasticsearch:9200;
        proxy_redirect off;
    }
}

# Virtual server to reverse proxy requests to ElasticHQ's default port to the 
#   elastichq server in the Docker stack, which is internally resolved 
#       to http://elastichq:5000
server {
    listen          5000 ssl http2 default_server;
    listen          [::]:5000 ssl http2 default_server;
    server_name     my-site.com;
    server_tokens   off;
    ssl             on;

    ssl_certificate /etc/letsencrypt/live/my-site.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/my-site.com/privkey.pem;
    include /etc/letsencrypt/conf/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/conf/ssl-dhparams.pem;

    error_page  497 https://$host:5000$request_uri;

    location / {
        proxy_pass http://elastichq:5000/;
    }
}

# configuration for APM server goes here
